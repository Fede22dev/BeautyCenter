name: Build EXE Windows

on:
  [ push ]

env:
  RELEASE_TAG: latest-build

jobs:
  build-exe:
    runs-on: windows-latest

    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UPX
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $release = Invoke-RestMethod -Uri 'https://api.github.com/repos/upx/upx/releases/latest' -Headers @{
            "Authorization" = "Bearer $env:GITHUB_TOKEN"
            "Accept"        = "application/vnd.github+json"
            "User-Agent"    = "GH-Actions-UPX"
          }
          $asset = $release.assets | Where-Object { $_.name -like '*-win64.zip' }
          $downloadUrl = $asset.browser_download_url
          Invoke-WebRequest -Uri $downloadUrl -OutFile 'upx.zip'
          Expand-Archive -Path 'upx.zip' -DestinationPath 'upx_temp'
          $upxExe = (Get-ChildItem -Path 'upx_temp' -Filter 'upx.exe' -Recurse | Select-Object -First 1).FullName
          $upxDir = Split-Path $upxExe -Parent
          echo "$upxDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "UPX_PATH=$upxDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Build Windows EXE (venv + deps + pyinstaller)
        env:
          APP_NAME: ${{ env.APP_NAME }}
          APP_VERSION: ${{ env.APP_VERSION }}
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
         
          pip show requests; pip show pyinstaller
          
          $nameMatch = Get-Content name_version.py | Select-String -Pattern "APP_NAME\s*=\s*['""](.*?)['""]"
          if ($null -ne $nameMatch) 
          {
            $appName = $nameMatch.Matches.Groups[1].Value
            echo "APP_NAME=$appName" >> $env:GITHUB_ENV
            echo "Found app name: $appName"
          } 
          else 
          {
            echo "::error::APP_NAME not found in name_version.py"
            exit 1
          }
          $versionMatch = Get-Content name_version.py | Select-String -Pattern "APP_VERSION\s*=\s*['""](.*?)['""]"
          if ($null -ne $versionMatch) 
          {
            $appVersion = $versionMatch.Matches.Groups[1].Value
            echo "APP_VERSION=$appVersion" >> $env:GITHUB_ENV
            echo "Found version: $appVersion"
          } 
          else 
          {
            echo "::error::APP_VERSION not found in name_version.py"
            exit 1
          }
         
          ./build_exe_beauty_center.ps1
        shell: pwsh

      - name: Delete previous release and tag (if present)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $headers = @{
            Authorization = "Bearer $env:GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
            "User-Agent" = "gh-actions"
          }
          try
          {
            $release = Invoke-RestMethod -Headers $headers -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }}"
          
            if ($release.id) 
            {
              Invoke-RestMethod -Headers $headers -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$($release.id)" -Method DELETE
              Write-Host "Deleted previous release with tag '${{ env.RELEASE_TAG }}'"
            }
          } 
          catch 
          {
            Write-Host "No existing release found"
          }
          try 
          {
            git push origin :refs/tags/${{ env.RELEASE_TAG }}
            Write-Host "Deleted tag '${{ env.RELEASE_TAG }}' on remote (if existed)"
          } 
          catch 
          {
            Write-Host "No tag to delete"
          }
        shell: pwsh

      - name: Create or Update Latest Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.APP_NAME }} v. ${{ env.APP_VERSION }}
          body: |
            Latest development build.
            Version: ${{ env.APP_VERSION }}
            Commit: ${{ github.sha }}
          files: |
            dist/${{ env.APP_NAME }} v. ${{ env.APP_VERSION }}.exe
